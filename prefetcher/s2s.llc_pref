#include "cache.h"
#include "vector"
#include <fstream>
#include <unordered_map>
#include <bits/stdc++.h> 
#include "Python.h"
#include "stdlib.h"
#include <tuple>
#include <iostream>
#include "numpy/arrayobject.h"
#define prefetchN 3
#define LastN 11



PyObject *pName, *pModule, *pDict, *pFuncIdx, *pFuncDelta, *pFuncModel, *pFuncPredict, *pValue, *presultIdx, *presultDelta,  *presultModel, *presult, *resultTuple, *pArgs;
PyArrayObject *result;

static std::vector<uint64_t> LastPCs;
static std::vector<uint64_t> LastAddrs;

static std::vector<std::string> ips;
static std::vector<std::string> addrs;

unordered_map<uint64_t, double> s2s_confidence_table;



std::ofstream fout;

void CACHE::llc_prefetcher_initialize() 
{
	//fout.open("/usr/eda/cs259/ajis01/Final_Project/LSTMPrefetcher/LSTMPrefetcher/data_collection/data_omnetpp_llc.csv");
	//fout << "ADDRS\tPCS\n";
  setenv("PYTHONPATH","./",1);


  // Initialize the Python Interpreter
  Py_Initialize();


  // Build the name object
  pName = PyUnicode_FromString((char*)"prefetch_predictor_2");

  // Load the module object
  pModule = PyImport_Import(pName);


  // pDict is a borrowed reference 
  pDict = PyModule_GetDict(pModule);


  // pFunc is also a borrowed reference 
  pFuncIdx     = PyDict_GetItemString(pDict, (char*)"initialize_idx_to_delta");
  pFuncDelta   = PyDict_GetItemString(pDict, (char*)"initialize_delta_to_idx");
  pFuncModel   = PyDict_GetItemString(pDict, (char*)"initialize_model");
  pFuncPredict = PyDict_GetItemString(pDict, (char*)"prefetch_predict");
}


uint32_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in, int warmup)
{
    LastPCs.push_back(ip);
    LastAddrs.push_back(addr);
    if(LastPCs.size() >= LastN)
    {
    
      uint64_t pf_addr = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;

      DP ( if (warmup_complete[cpu]) {
      cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr>>LOG2_BLOCK_SIZE);
      cout << " pf_cl: " << (pf_addr>>LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit << " type: " << +type << endl; });

      long long int prefAddr[prefetchN];  

      if (PyCallable_Check(pFuncIdx))
      {
          pValue=Py_BuildValue("");
          pArgs = PyTuple_New(1);
          PyTuple_SetItem(pArgs, 0, reinterpret_cast<PyObject*>(pValue));
          presultIdx = PyObject_CallObject(pFuncIdx, pArgs);
          PyErr_Print();
      } else 
      {
          PyErr_Print();
      }
      
      if (PyCallable_Check(pFuncDelta))
      {
          pValue=Py_BuildValue("");
          pArgs = PyTuple_New(1);
          PyTuple_SetItem(pArgs, 0, reinterpret_cast<PyObject*>(pValue));
          presultDelta = PyObject_CallObject(pFuncDelta, pArgs);
          PyErr_Print();
      } else 
      {
          PyErr_Print();
      }

      if (PyCallable_Check(pFuncModel))
      {
          pValue=Py_BuildValue("");
          pArgs = PyTuple_New(1);
          PyTuple_SetItem(pArgs, 0, reinterpret_cast<PyObject*>(pValue));
          presultModel = PyObject_CallObject(pFuncModel, pArgs);
          PyErr_Print();
      } else 
      {
          PyErr_Print();
      }

      if (PyCallable_Check(pFuncPredict))
      {
          pValue=Py_BuildValue("[i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,i,O,O,O,i,i]", LastPCs[0], LastPCs[1], LastPCs[2], LastPCs[3], LastPCs[4], LastPCs[5], LastPCs[6], LastPCs[7], LastPCs[8], LastPCs[9], LastPCs[10], LastAddrs[0], LastAddrs[1], LastAddrs[2], LastAddrs[3], LastAddrs[4], LastAddrs[5], LastAddrs[6], LastAddrs[7], LastAddrs[8], LastAddrs[9], LastAddrs[10], prefetchN, presultIdx, presultDelta, presultModel, LOG2_PAGE_SIZE, !warmup);
          pArgs = PyTuple_New(1);
          PyTuple_SetItem(pArgs, 0, reinterpret_cast<PyObject*>(pValue));
          presult = PyObject_CallObject(pFuncPredict, pArgs);
          PyErr_Print();
      } else 
      {
          PyErr_Print();
      }
      int k=0;
      if (PyList_Check(presult)) {
          // okay, it's a list
          for (Py_ssize_t i = 0; i < PyList_Size(presult)-1; i+=2) {
              PyObject* next = PyList_GetItem(presult, i);
              prefAddr[k++] = PyLong_AsLong(next) ;
              PyObject* next1 = PyList_GetItem(presult, i+1);
              s2s_confidence_table[pf_addr>>LOG2_BLOCK_SIZE] = PyFloat_AsDouble(next1) ;
          }
          for(int i=0; i<prefetchN; ++i)
          { 
          //  cout << "Addr: " << prefAddr[i] << "\n";
            pf_addr = (prefAddr[i] > 0) ? (uint64_t) prefAddr[i]: (uint64_t) (~prefAddr[i] + 1);
            prefetch_line(ip, addr, ((addr+pf_addr) >> LOG2_BLOCK_SIZE)<<LOG2_BLOCK_SIZE, FILL_LLC, 0);
          }
      }

      LastAddrs.erase(LastAddrs.begin());
      LastPCs.erase(LastPCs.begin());
    }

  return metadata_in;
}

uint32_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
	fout.close();
  // Clean up
  Py_DECREF(pValue);
  Py_DECREF(pModule);
  Py_DECREF(pName);

  // Finish the Python Interpreter
  Py_Finalize();
}
